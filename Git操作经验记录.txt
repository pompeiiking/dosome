【Git 操作经验记录】

日期：2024-05-07
场景：GitHub 代码推送冲突处理
背景：在进行本地代码推送到远程仓库时遇到合并冲突，涉及文件删除与修改的冲突情况。

【问题描述】
1. 推送失败现象
   - 执行 git push 时被拒绝
   - 提示 "Updates were rejected because the remote contains work that you do not have locally"
   - 系统建议执行 git pull 来集成远程更改

2. 冲突原因分析
   - 本地分支删除了 readme 文件
   - 远程分支对 readme 文件进行了修改
   - 导致产生了修改/删除（modify/delete）类型的冲突
   - 自动合并失败，需要手动解决冲突

3. 常规解决方案（供参考）
   a) 标准流程：
      - 执行 git pull 获取远程更改
      - 解决冲突文件
      - 使用 git add 标记解决
      - 执行 git commit 提交解决结果
      - 最后 git push 推送到远程
   
   b) 保守方案：
      - 备份本地更改
      - 重置到远程状态
      - 重新应用本地更改
      - 解决冲突后提交

4. 快速解决方案（本次采用）
   a) 操作步骤：
      - 使用 git rm readme 删除冲突文件
      - git commit 提交更改
      - git push -f 强制推送
   
   b) 注意事项：
      - 强制推送会覆盖远程历史
      - 适用于个人分支或确认可以覆盖的情况
      - 团队协作时需谨慎使用

【经验总结】
1. 预防措施
   - 推送前先拉取远程更新
   - 重要文件修改前先与团队沟通
   - 保持本地代码与远程同步的习惯

2. 最佳实践
   - 养成定期 pull 的习惯
   - 重要操作前先备份
   - 谨慎使用强制推送
   - 团队协作时优先使用标准流程

3. 快速判断
   - 查看 git status 了解冲突状态
   - 根据场景选择合适的解决方案
   - 个人分支可以考虑快速解决方案
   - 多人协作分支严格遵循标准流程

4. 命令速查
   ```
   git status              # 查看状态
   git pull               # 拉取远程
   git rm <file>          # 删除文件
   git commit -m "消息"    # 提交更改
   git push -f            # 强制推送
   ```

【注意事项】
1. 强制推送慎用
2. 操作前先备份
3. 团队协作遵循规范
4. 保持良好的同步习惯

【适用场景】
- 个人项目快速解决冲突
- 确认可以覆盖的分支
- 不影响他人的独立开发分支

【不适用场景】
- 多人协作的主分支
- 包含重要历史记录的分支
- 无法确认远程改动影响的情况 