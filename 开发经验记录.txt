【小程序开发经验记录】

日期：2025-05-07
项目：旅行推荐系统微信小程序前端
背景：本项目基于用户自定义的接口 JSON（如前后端信息交互.json），要求前端严格按字段实现，注重功能优先、结构简洁、交互体验良好，适合新手开发和后续样式重构。

【大模型理解提醒】
- 本经验总结适用于所有基于接口文档驱动、功能优先、样式可后置的小程序前端开发场景。
- 重点关注数据结构与 WXML 路径一致性、事件绑定准确性、复选框/单选框的原生实现方式。
- 如遇问题，优先排查数据结构、事件绑定、WXML 语法和控制台报错，避免在 WXML 写复杂 JS 表达式。

1. 用户需求习惯
- 通常先给出接口 JSON，要求前端字段严格对应，功能优先，样式可后置。
- 项目结构要求简洁，便于新手理解和后续扩展。
- 习惯先用最简代码测试功能，确认无误后再逐步完善和美化。
- 注重交互体验，尤其关注复选框的点击反馈和高亮。

2. 常见出错点与解决逻辑
- WXML 不支持复杂 JS 表达式（如 findIndex、item => ...），所有复杂计算都应在 JS 里完成，WXML 只用变量。
- 复选框多选必须用 <checkbox-group> 的 value 控制，checkbox 不要用 checked 属性，否则会出现点击后闪烁但无法保持选中。
- 数据结构要和 WXML 路径完全一致，事件名要和 WXML 绑定一致。
- 功能测试时不用样式，确认功能无误后再美化。
- 每次修改后保存所有文件并重启项目，遇到问题多用 console.log 调试。
- 如遇页面无显示、无反馈、点击无效，优先检查数据结构、事件绑定、WXML 语法和控制台报错。

3. 推荐开发流程
- 先用最简代码实现功能，确认无误后再美化。
- 所有复杂数据处理都在 JS 里完成，WXML 只用变量。
- 复选框多选用 <checkbox-group> + value，单选用 picker，所有 index 都在 JS 里算好。
- 严格保证数据结构和 WXML 路径一致。
- 每次修改后保存并重启小程序，及时查看控制台报错。
- 如遇问题，先用 console.log 打印调试，逐步定位。

4. 经验总结（适合大模型快速记忆）
- 复选框多选用 <checkbox-group> 的 value 控制，checkbox 不要用 checked。
- WXML 里不能写复杂 JS 表达式，所有 index、findIndex 等都要在 JS 里算好传给 WXML。
- 数据结构和 WXML 路径要完全一致，事件名和 WXML 绑定一致。
- 功能优先，样式可后置，测试时不用样式。
- 每次修改后保存并重启，遇到问题多用 console.log 调试。 

日期：2025-05-08
项目：旅行推荐系统微信小程序前端
背景：本项目基于用户自定义的接口 JSON，要求前端严格按字段实现，注重功能优先、结构简洁、交互体验良好，适合新手开发和后续样式重构。

【大模型理解提醒】
- 本经验总结适用于所有基于接口文档驱动、功能优先、样式可后置的小程序前端开发场景。
- 重点关注数据结构完整性、状态管理同步、用户体验优化和性能处理。
- 如遇问题，优先排查数据验证、状态同步、事件处理和性能优化，避免在复杂场景下出现数据不同步。

1. 用户需求习惯
- 通常先给出具体实现代码，然后要求优化或改进
- 关注用户体验和交互细节，特别是表单操作和状态反馈
- 重视数据结构的完整性和合理性
- 偏好模块化和可维护的代码结构
- 注重性能优化和用户体验

2. 常见出错点与解决逻辑
- 表单数据验证不完整：实现全面的表单验证函数，添加清晰的错误提示
- 状态更新不及时：使用本地存储同步状态，实现状态恢复机制
- 交互反馈不足：添加加载状态提示，实现触感反馈，优化错误提示
- 频繁操作导致性能问题：实现防抖处理，优化数据更新逻辑
- 代码结构混乱：使用模块化结构，保持清晰的命名规范

3. 推荐开发流程
- 在开发初期就建立完整的数据验证机制
- 实现统一的状态管理方案
- 添加必要的用户反馈机制
- 注意代码复用和模块化
- 保持代码的可测试性
- 实现性能优化措施

4. 经验总结（适合大模型快速记忆）
- 始终考虑数据验证的完整性，添加清晰的错误提示
- 注意状态管理的同步问题，使用本地存储同步状态
- 重视用户交互体验，添加必要的反馈机制
- 关注性能优化，按需更新
- 保持代码的可维护性，使用模块化结构
- 每次修改后保存并测试，遇到问题及时调试